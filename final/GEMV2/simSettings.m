% Simulation settings
%
% Contains the most relevant simulation parameters. Loaded each time
% simulation is run.
%
% Copyright (c) 2014, Mate Boban

%% Parameters related to vehicle, foliage, and building outlines
% Load the file containing vehicle outlines/polygons in a three column
% array [vehicleID|Latitude|Longitude] or a five column array
% [vehicleID|midpointLat|midpointLong|vehicleType|bearing] provided by
% SUMO. In the latter case, vehicle polygons will be generated by
% generateVehiclePolygons.m using specified vehicle dimension statistics.
% Vehicles in the entire city of Porto
%   vehiclesFile = 'inputPolygon/vehiclesPorto';
% Also in the package:
% Vehicles in one quarter of Porto (bottom left quarter)
   vehiclesFile = 'inputPolygon/vehiclesPortoQuarter'; 
% SUMO simulation in the city of Cologne, Germany
%   vehiclesFile = 'inputMobilitySUMO/CologneSUMOMobility.xml'; 
% SUMO simulation in the city of Newcastle, UK
% vehiclesFile = 'inputMobilitySUMO/NewcastleSUMOMobility.xml';
   
% Bounding box (bottom-left, top-right) for removing vehicles outside of
% the desired area (applies for SUMO-generated mobility files). 
% If bounding box is not needed, set it to [-Inf,-Inf,Inf,Inf]; 
% For the included Cologne SUMO mobility dataset, to match the included
% CologneCityPart.osm static file, set the bBoxVehicles as follows: 
% bBoxVehicles = [6.93,50.913,7,50.96];
bBoxVehicles = [-Inf,-Inf,Inf,Inf];

% Load the file containing outlines of static objects (buildings)
% Entire city of Porto
%   staticFile = 'inputPolygon/buildingsPorto'; 
% Also in the package:
% Vehicles in one quarter of Porto (bottom left quarter)
   staticFile = 'inputPolygon/buildingsPortoQuarter'; 
% Part of Cologne (OpenStreetMap .osm)
%   staticFile = 'inputPolygon/CologneCityPart.osm'; 
% Part of Newcastle, UK (OpenStreetMap .osm)
% staticFile = 'inputPolygon/Newcastle.osm';

% Load the file containing outlines of foliage. If foliage is contained in
% staticFile above, use 'inputPolygon/emptyStaticFile' as foliageFile.
foliageFile = 'inputPolygon/emptyStaticFile';

% Number of rows per vehicle outline (by default, there are 5 sides per
% vehicle outline defined by 5 points, with the first point repeating to
% close the polygon (i.e., 6 rows in total).
numRowsPerVehicle = 6;

% Tolerance (in meters) for simplifying building outlines. Useful if
% building outlines are overly complex. For more info, see:
% http://www.mathworks.com/matlabcentral/fileexchange/21132-line-simplification
toleranceBuildings = 0;

%{ 
% Which model is used for NLOSv links (models contained in LOSNLOSv.m):
%   1: Simple model: add attenuation based on the number of obstructing
%   vehicles, irrespective of their dimensions. NB: requires addNLOSvLoss
%   variable to be set up.
%   2: Bullington method for knife-edge diffraction ("Radio propagation for
%   vehicular communications", K. Bullington, IEEE Transactions on
%   Vehicular Technology, Vol. 26, Issue 4): Top and side diffraction are
%   accounted for.
%   3: Multiple knife-edge based on ITU-R method (Propagation by
%   diffraction, Recommendation P.526, Feb. 2007, available at
%   http://www.itu.int/rec/R-REC-P.526-13-201311-I/en). Top and side
%   diffraction are accounted for.
%
% Details on how the NLOSv models are implemented are available in: "Impact
% of vehicles as obstacles in vehicular ad hoc networks", Boban et al.,
% IEEE Journal on Selected Areas in Communications, Vol. 29, Issue 1.
%}
NLOSvModelType = 3;

% Additional loss (in dB) due to obstructing vehicles (min, med, max).
% Applies for NLOSvModelType = 1 only (for details, see LOSNLOSv.m).
addNLOSvLoss = [2 6 10];

%% Parameters related to communicating vehicle pairs
% Array containing communicating vehicle pairs. NB1: vehicles
% in pairs are fetched based on the row ID (e.g., if [4,10] is a pair, 4th
% and 10th vehicle in the vehicle list are selected. NB2: if same pairs are
% used for all time-steps, then perform "repmat" on the array.
commPairArray = 'inputPolygon/emptyCommPairFile';

% In case commPairArray is empty, numCommPairs defines how many
% communication pairs are generated. If this number is larger than the
% total number of pairs in the system, then it is replaced by the latter.
% Conversely, if you want to analyze all possible communication pairs,
% simply set numCommPairs to Inf;
numCommPairs = 10^4;

%% Dimensions of vehicles (in meters)
% Mean and standard deviation for normally distributed dimensions
carMeanHeight = 1.5;
carStdDev =.1;
truckMeanHeight = 3; 
truckStdDev = .1;

carMeanWidth = 1.75;
carStdDevWidth = .1;
truckMeanWidth = 2;
truckStdDevWidth = .1;

carMeanLength = 5;
carStdDevLength = .4;
truckMeanLength = 9;
truckStdDevLength = .6;

% Putting vehicle dimensions in an array for more compact argument passing 
vehDimensionParams = ...
    [carMeanHeight     carStdDev        truckMeanHeight     truckStdDev;...
     carMeanWidth      carStdDevWidth   truckMeanWidth      truckStdDevWidth;...
     carMeanLength     carStdDevLength  truckMeanLength     truckStdDevLength];

% For vehicles not generated by the simulation environment, any vehicle
% with length larger than lengthThreshold (in meters) is assumed to be a
% tall vehicle (e.g., a truck)
lengthThreshold = 7;

%% Max. communication range for LOS, NLOSv, and NLOSb (commRange = LOSRange)
commRange = 500; 
maxNLOSvRange = 400;
maxNLOSbRange = 300;

%% Propagation-related parameters
% Antenna height (in meters, added atop vehicle height); 
antennaHeight = .2;

% Antenna polarization: 0 - vertical; 1 - horizontal
polarization = 0;

% Operating frequency (in Hz)
freq = 5.89*10^9;

% Transmit power (in dBm)
txPower = 18;

% Tx and Rx antenna gains (in dBi)
Gt = 1;
Gr = 1;

% Path Loss Exponent (PLE) for NLOSb links
PLENLOSb = 2.9;

%% Small-scale signal variation parameters
% (taken from the measurements described in the paper "Geometry-Based
% Vehicle-to-Vehicle Channel Modeling for Large-Scale Simulation". Details
% on the use of parameters below are described in the same paper). Other
% environments can have different min and max small scale fading.

% Minimum fading for LOS, NLOSv, and NLOSb links
minFadingLOS = 3.3;
minFadingNLOSv = 3.8;
minFadingNLOSb = 4.1;

% Maximum fading for LOS, NLOSv, and NLOSb links
maxFadingLOS = 5.2;
maxFadingNLOSv = 5.3;
maxFadingNLOSb = 6.8;

% Minimum radius (in meters) based on which the small scale signal
% variation model determines maximum vehicle density. The specific value is
% a guesstimate.
minDensityRange = 250;

%% Reflection- and diffraction-related parameters
% Determines if reflections and diffractions are used (useReflDiffr=1) or
% not (useReflDiffr=0) If not, only log-distance path loss is used for
% NLOSb links.
useReflDiffr=1;

% If reflections are used 
if useReflDiffr
    % Minimum fading for NLOSb data is set to 0 in case reflections and
    % diffractions are used. Detailed explanation is available in the paper
    minFadingNLOSb = 0;
end

% Relative permittivity of materials
% (http://en.wikipedia.org/wiki/Relative_permittivity).
% Buildings (concrete)
buildingReflRelPerm = 4.5;
% Vehicles (rough approximation: mix of metal, glass, rubber)
vehReflRelPerm = 6; 

%% Google Earth Visualization 
% NB: in case of large networks, generating the visualization can take very
% long time. Use accordingly.
GEVisualize = 1;
    % IF GEVisualize = 1, then parameters below indicate what is plotted.
    % Plot static objects and vehicle polygons
    plotPoly = 1;
    % Plot the received power for each of the communications pairs
    plotRxPwr = 1;
    % Plot the number of neighbors per vehicle
    plotNeighbors = 1;
    
%% Output-related parameters
% Verbose textual output in console (verbose = 1)
verbose = 1;